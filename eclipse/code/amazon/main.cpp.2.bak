# include <iostream>
# include <string>
# include <vector>


using namespace std ;


int differ(string string1, string string2)
{
	int i, j ;
	vector<string> s1, s2 ;
	string s ;
	s = "" ;
	string1 += ' ' ;
	for (i = 0 ; i < string1.length() ; i++)
	{
		if (string1[i] == ' ')
		{
			s1.push_back(s) ;
			s = "" ;
		}
		else s += string1[i] ;
	}
	
	s = "" ;
	string2 += ' ' ;
	for (i = 0 ; i < string2.length() ; i++)
	{
		if (string2[i] == ' ')
		{
			s2.push_back(s) ;
			s = "" ;
		}
		else s += string2[i] ;
	}
	
	int len1 = s1.size() , len2 = s2.size() ;
	int **dp = new int*[len1+10] ;
	int cost ;
	for (i = 0 ; i < len1+10 ; i++)
		dp[i] = new int[len2+10] ;
	for (i = 0 ; i <= len1 ; i++)
		for (j = 0 ; j <= len2 ; j++) dp[i][j] = 0 ;
	
	for (i = 0 ; i <= len1 ; i++) dp[i][0] = i ;
	for (j = 0 ; j <= len2 ; j++) dp[0][j] = j ;
	
	for (i = 1 ; i <= len1 ; i++)
		for (j = 1 ; j <= len2 ; j++)
		{
			cost = ((s1[i-1] == s2[j-1])?0:1) ;
			dp[i][j] = 1+((dp[i-1][j] < dp[i][j-1]) ? dp[i-1][j] : dp[i][j-1]);
			if (dp[i][j] > dp[i-1][j-1] + cost)
				dp[i][j] = dp[i-1][j-1] + cost ;
		}
	
	int ans = dp[len1][len2] ;
	for (i = 0 ; i < len1+10 ; i++)
		delete[] dp[i] ;
	delete[] dp ;
	return ans ;
}


int main ()
{
	string s1,s2 ;
	getline(cin, s1) ;
	getline(cin, s2) ;
	cout << differ(s1, s2) << endl ;
	return 0 ;
}
